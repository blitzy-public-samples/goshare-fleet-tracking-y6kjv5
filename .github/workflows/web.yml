# GitHub Actions workflow for Fleet Tracking System Web Dashboard
# Implements CI/CD pipeline for building, testing, and deploying the React application
# Requirements addressed:
# - CI/CD Pipeline (4.7 Deployment Architecture/Deployment Process)
# - Web Dashboard (4.4.1 Frontend Technologies)
# - Container Deployment (4.4.2 Backend Technologies)
# - Security Architecture (4.6 Security Architecture)

name: Web Dashboard CI/CD

# Trigger on push and pull request events for main and develop branches
# Only trigger when changes are made in src/web directory
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/web/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/web/**'

# Environment variables used across jobs
env:
  NODE_ENV: production
  DOCKER_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  IMAGE_NAME: fleet-tracking/web-dashboard

# Define permissions needed for the workflow
permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test -- --coverage
        
      - name: Run integration tests
        run: npm run test -- --testPathPattern=tests/integration
        
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: src/web/coverage
          retention-days: 14

  build:
    name: Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            API_URL=${{ secrets.API_URL }}
            SOCKET_URL=${{ secrets.SOCKET_URL }}
            GOOGLE_MAPS_KEY=${{ secrets.GOOGLE_MAPS_KEY }}

      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=high

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
          cache-from: type=gha
          build-args: |
            API_URL=${{ secrets.API_URL }}
            SOCKET_URL=${{ secrets.SOCKET_URL }}
            GOOGLE_MAPS_KEY=${{ secrets.GOOGLE_MAPS_KEY }}

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name fleet-tracking-cluster \
            --region ${{ secrets.AWS_REGION }}
            
      - name: Deploy to Kubernetes
        run: |
          # Update image tag in deployment
          kubectl set image deployment/web-dashboard \
            web-dashboard=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n fleet-tracking
            
          # Apply other Kubernetes manifests
          kubectl apply -f src/web/kubernetes/configmap.yaml -n fleet-tracking
          kubectl apply -f src/web/kubernetes/service.yaml -n fleet-tracking
          kubectl apply -f src/web/kubernetes/ingress.yaml -n fleet-tracking
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/web-dashboard -n fleet-tracking --timeout=300s
          
      - name: Run health checks
        run: |
          ENDPOINT=${{ github.ref == 'refs/heads/main' && 'https://dashboard.fleettracking.com/health' || 'https://staging.dashboard.fleettracking.com/health' }}
          curl --fail $ENDPOINT || exit 1