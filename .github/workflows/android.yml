# GitHub Actions workflow for Android driver application CI/CD
# Addresses requirements: Mobile Applications, CI/CD Pipeline, Performance Requirements
name: Android CI

# Trigger workflow on push and pull requests to main and develop branches
# Only when changes are made in the Android application directory
on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'src/android/**'
  pull_request:
    branches: 
      - main
      - develop
    paths:
      - 'src/android/**'

# Environment variables used across jobs
env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  GRADLE_VERSION: '7.6'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository code
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      # Setup Java environment for Android build
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
      
      # Setup Node.js environment with npm cache
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/android/package-lock.json'
      
      # Cache Gradle dependencies
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # Install Node.js dependencies
      - name: Install Dependencies
        working-directory: src/android
        run: npm ci
      
      # Run TypeScript type checking
      - name: Type Check
        working-directory: src/android
        run: npx tsc --noEmit
      
      # Run unit tests
      - name: Run Unit Tests
        working-directory: src/android
        run: npm test -- --coverage
      
      # Run integration tests for offline functionality
      - name: Run Integration Tests
        working-directory: src/android
        run: |
          npm test -- --testPathPattern=tests/integration/offline.test.ts
          npm test -- --testPathPattern=tests/integration/location.test.ts
      
      # Build Android release APK
      - name: Build Android Release
        working-directory: src/android
        env:
          ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "$ANDROID_SIGNING_KEY" > release.keystore.base64
          base64 -d release.keystore.base64 > android/app/release.keystore
          npm run build:android
      
      # Upload build artifacts
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-release
          path: src/android/android/app/build/outputs/apk/release/*.apk
          retention-days: 5

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/android/package-lock.json'
      
      - name: Install Dependencies
        working-directory: src/android
        run: npm ci
      
      # Run comprehensive test suite
      - name: Run Test Suite
        working-directory: src/android
        run: |
          npm test -- --coverage
          npm test -- --testPathPattern=tests/e2e
      
      # Upload test results
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/android/coverage/
          retention-days: 5

  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      # Download build artifacts
      - name: Download APK
        uses: actions/download-artifact@v3
        with:
          name: android-release
          path: release
      
      # Setup Node.js for Firebase deployment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@12.0.0
      
      # Deploy to Firebase App Distribution
      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase appdistribution:distribute release/*.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups "beta-testers" \
            --release-notes "Automated deployment from GitHub Actions"
      
      # Create GitHub Release
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from GitHub Actions
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false