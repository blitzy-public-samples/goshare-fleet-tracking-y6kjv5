# Human Tasks:
# 1. Verify TLS certificates are properly configured in cert-manager
# 2. Ensure DNS records are configured for the ingress endpoints
# 3. Monitor ingress metrics in Prometheus/Grafana
# 4. Configure rate limiting and WAF rules
# 5. Test high availability failover scenarios

---
# Requirement: Load Balancing (4.1 High-Level Architecture Overview/API Gateway Layer)
# Namespace for NGINX Ingress Controller
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: fleet-tracking
    kubernetes.io/cluster-service: "true"

---
# Requirement: High Availability (4.5 Scalability Architecture)
# NGINX Ingress Controller deployment with multiple replicas
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: fleet-tracking
spec:
  replicas: 3  # High availability with multiple replicas
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: monitoring-service-account  # Using imported service account
      containers:
      - name: controller
        image: k8s.gcr.io/ingress-nginx/controller:v1.8.1  # Version specified in dependencies
        args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --enable-ssl-passthrough
          - --enable-metrics=true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          runAsUser: 101
          runAsNonRoot: true
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
          - name: https
            containerPort: 443
            protocol: TCP
          - name: metrics
            containerPort: 10254
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi

---
# Requirement: Load Balancing (4.1 High-Level Architecture Overview/API Gateway Layer)
# LoadBalancer service for ingress controller
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: fleet-tracking
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/certificate-id"  # Replace with actual cert ARN
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx

---
# Requirement: Traffic Routing (4.2 Component Architecture/4.2.2 Backend Services Architecture)
# Default IngressClass for NGINX controller
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: fleet-tracking
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx

---
# Requirement: SSL Termination (8.2 Data Security/8.2.1 Encryption Standards)
# ConfigMap for NGINX configuration with security settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: fleet-tracking
data:
  ssl-protocols: "TLSv1.3"  # Enforce TLS 1.3
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
  ssl-session-tickets: "false"
  ssl-session-timeout: "10m"
  use-forwarded-headers: "true"
  use-proxy-protocol: "false"
  enable-real-ip: "true"
  client-header-timeout: "60"
  client-body-timeout: "60"
  proxy-body-size: "8m"
  server-tokens: "false"
  http2: "true"
  hsts: "true"
  hsts-include-subdomains: "true"
  hsts-max-age: "31536000"
  keep-alive: "75"
  keep-alive-requests: "100"
  proxy-connect-timeout: "10"
  proxy-read-timeout: "60"
  proxy-send-timeout: "60"
  enable-modsecurity: "true"
  enable-owasp-modsecurity-crs: "true"
  worker-processes: "auto"
  upstream-keepalive-connections: "32"
  upstream-keepalive-timeout: "60"
  upstream-keepalive-requests: "100"
  limit-connections: "20000"
  limit-rps: "2000"
  limit-rpm: "100000"