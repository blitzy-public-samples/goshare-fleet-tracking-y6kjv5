# Human Tasks:
# 1. Generate secure random values for all sensitive fields using a secure key generator
# 2. Store the unencoded values in a secure vault or password manager for backup
# 3. Ensure values are base64 encoded before applying to cluster
# 4. Rotate these secrets periodically according to security policy
# 5. Set up proper RBAC permissions for accessing these secrets
# 6. Configure secret encryption at rest in Kubernetes

# Requirement: Security Architecture - Secure storage of sensitive configuration data using Kubernetes Secrets
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: fleet-tracking
  labels:
    app: fleet-tracking
    component: backend
  annotations:
    # Requirement: Data Protection - Encryption of sensitive configuration data at rest
    encryption.kubernetes.io/encryption-provider: aescbc

# Requirement: Security Architecture - AES-256 encryption for sensitive data
type: Opaque

# Requirement: Database Security - Secure storage of database credentials
data:
  # PostgreSQL Credentials
  # Values must be base64 encoded before applying
  POSTGRES_USER: ${BASE64_ENCODED_PG_USER}
  POSTGRES_PASSWORD: ${BASE64_ENCODED_PG_PASSWORD}
  POSTGRES_DB: ${BASE64_ENCODED_PG_DB}

  # MongoDB Connection String with credentials and replica set configuration
  # Format: mongodb://username:password@host:port/database?replicaSet=rs0
  MONGODB_URI: ${BASE64_ENCODED_MONGODB_URI}

  # Redis password for cache, pub/sub, and real-time processing
  REDIS_PASSWORD: ${BASE64_ENCODED_REDIS_PASSWORD}

  # Requirement: API Security - Secure storage of API keys and authentication tokens
  JWT_SECRET: ${BASE64_ENCODED_JWT_SECRET}
  ENCRYPTION_KEY: ${BASE64_ENCODED_AES_256_KEY}
  GOOGLE_MAPS_API_KEY: ${BASE64_ENCODED_MAPS_API_KEY}
  SMS_API_KEY: ${BASE64_ENCODED_SMS_API_KEY}
  PUSH_NOTIFICATION_KEY: ${BASE64_ENCODED_FCM_KEY}

  # Database connection pool configuration with failover settings
  # These should be JSON strings that are base64 encoded
  PG_POOL_CONFIG: ${BASE64_ENCODED_PG_POOL_CONFIG} # Based on DEFAULT_PG_POOL_CONFIG from database.ts
  MONGO_OPTIONS: ${BASE64_ENCODED_MONGO_OPTIONS} # Based on DEFAULT_MONGO_OPTIONS from database.ts
  REDIS_CONFIG: ${BASE64_ENCODED_REDIS_CONFIG} # Based on REDIS_CONFIG from redis.ts