# Human Tasks:
# 1. Configure match git repository with certificates and profiles
# 2. Set up required environment variables in CI/CD:
#    - MATCH_PASSWORD: For certificate decryption
#    - FASTLANE_PASSWORD: For App Store authentication
#    - MATCH_GIT_BASIC_AUTHORIZATION: For certificate repository access
#    - APPLE_DEVELOPER_TEAM_ID: Team ID from Apple Developer account
#    - APP_STORE_CONNECT_API_KEY_PATH: Path to API key for App Store Connect
# 3. Verify Apple Developer Portal access and permissions
# 4. Configure App Store Connect API key with appropriate access

# Requirements addressed:
# - Mobile Applications (1.1): React Native driver applications for iOS with offline-first architecture
# - CI/CD Pipeline (4.7): Automated building and deployment of mobile applications
# - Security Architecture (4.6): Secure certificate and provisioning profile management

# fastlane version: 2.217.0
# cocoapods version: 1.12.1
# xcode version: 14.0+

default_platform(:ios)

# Import environment-specific configurations
import("Appfile")
import("Matchfile")

# Workspace and scheme configuration
WORKSPACE = "FleetTracker.xcworkspace"
SCHEME = "FleetTracker"

before_all do |lane, options|
  # Verify required environment variables
  ensure_env_vars(
    env_vars: [
      'MATCH_PASSWORD',
      'FASTLANE_PASSWORD',
      'MATCH_GIT_BASIC_AUTHORIZATION',
      'APPLE_DEVELOPER_TEAM_ID'
    ]
  )

  # Install CocoaPods dependencies
  cocoapods(
    clean_install: true,
    repo_update: true
  )

  # Increment build number
  increment_build_number(
    build_number: ENV["BUILD_NUMBER"] || Time.now.strftime("%Y%m%d%H%M"),
    xcodeproj: "FleetTracker.xcodeproj"
  )
end

desc "Development build lane"
lane :build_dev do
  # Setup development certificates
  sync_code_signing(
    type: "development",
    app_identifier: ["com.fleettracker.ios.dev"],
    force_for_new_devices: true,
    readonly: false
  )

  # Build development IPA
  build_ios_app(
    workspace: WORKSPACE,
    scheme: SCHEME,
    configuration: "Debug",
    export_method: "development",
    include_symbols: true,
    include_bitcode: false,
    export_options: {
      compileBitcode: false,
      provisioningProfiles: {
        "com.fleettracker.ios.dev" => "match Development com.fleettracker.ios.dev"
      }
    }
  )

  # Run unit tests
  run_tests(
    workspace: WORKSPACE,
    scheme: SCHEME,
    device: "iPhone 14",
    configuration: "Debug",
    code_coverage: true
  )
end

desc "Staging build lane"
lane :build_staging do
  # Setup adhoc certificates
  sync_code_signing(
    type: "adhoc",
    app_identifier: ["com.fleettracker.ios.staging"],
    readonly: true
  )

  # Build staging IPA
  build_ios_app(
    workspace: WORKSPACE,
    scheme: SCHEME,
    configuration: "Staging",
    export_method: "ad-hoc",
    include_symbols: true,
    include_bitcode: false,
    export_options: {
      compileBitcode: false,
      provisioningProfiles: {
        "com.fleettracker.ios.staging" => "match AdHoc com.fleettracker.ios.staging"
      }
    }
  )

  # Run full test suite
  run_tests(
    workspace: WORKSPACE,
    scheme: SCHEME,
    device: "iPhone 14",
    configuration: "Staging",
    code_coverage: true,
    include_simulator_logs: true
  )

  # Upload to TestFlight
  upload_to_testflight(
    skip_waiting_for_build_processing: true,
    apple_id: ENV["APPLE_ID"],
    team_id: ENV["APP_STORE_TEAM_ID"],
    changelog: "Staging build for internal testing",
    distribute_external: false,
    notify_external_testers: false
  )
end

desc "Production build and deployment lane"
lane :build_production do
  # Setup appstore certificates
  sync_code_signing(
    type: "appstore",
    app_identifier: ["com.fleettracker.ios"],
    readonly: true
  )

  # Build production IPA
  build_ios_app(
    workspace: WORKSPACE,
    scheme: SCHEME,
    configuration: "Release",
    export_method: "app-store",
    include_symbols: true,
    include_bitcode: false,
    export_options: {
      compileBitcode: false,
      provisioningProfiles: {
        "com.fleettracker.ios" => "match AppStore com.fleettracker.ios"
      }
    }
  )

  # Run comprehensive test suite
  run_tests(
    workspace: WORKSPACE,
    scheme: SCHEME,
    device: "iPhone 14",
    configuration: "Release",
    code_coverage: true,
    include_simulator_logs: true,
    fail_build: true
  )

  # Upload to App Store
  upload_to_app_store(
    force: true,
    skip_metadata: false,
    skip_screenshots: true,
    precheck_include_in_app_purchases: false,
    submission_information: {
      add_id_info_uses_idfa: false,
      export_compliance_uses_encryption: false,
      content_rights_contains_third_party_content: false
    }
  )
end

desc "Run comprehensive test suite"
lane :test do
  # Run unit tests
  run_tests(
    workspace: WORKSPACE,
    scheme: SCHEME,
    device: "iPhone 14",
    code_coverage: true,
    fail_build: true,
    test_without_building: false,
    result_bundle: true,
    output_directory: "fastlane/test_output"
  )

  # Generate code coverage report
  slather(
    workspace: WORKSPACE,
    scheme: SCHEME,
    proj: "FleetTracker.xcodeproj",
    html: true,
    show: true,
    output_directory: "fastlane/test_output/coverage",
    ignore: [
      "Pods/*",
      "FleetTrackerTests/*",
      "FleetTrackerUITests/*"
    ]
  )
end

error do |lane, exception, options|
  # Handle errors and cleanup
  clean_build_artifacts
  notification(
    title: "Fastlane Error",
    message: "Lane #{lane} failed: #{exception.message}",
    success: false
  )
end